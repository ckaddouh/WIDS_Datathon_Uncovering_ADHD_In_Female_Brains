# -*- coding: utf-8 -*-
"""Categorical_Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_UfGe9zdVcsJ18wyptemCtb6gd2MVm-r

#**TRAIN DATA**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = "/content/drive/My Drive/TRAIN_CATEGORICAL_METADATA.xlsx"

df = pd.read_excel(file_path)

df.head()

# handling missing values
print(df.isnull().sum())
print(len(df))

df["PreInt_Demos_Fam_Child_Ethnicity"].value_counts(normalize=True)

# fill in missing values (11/1213) with mode
df["PreInt_Demos_Fam_Child_Ethnicity"] = df["PreInt_Demos_Fam_Child_Ethnicity"].fillna(df["PreInt_Demos_Fam_Child_Ethnicity"].mode()[0])

print(df.isnull().sum())

df.head()

# if both occ and edu is missing for parent 2, binary encode 1 for no_parent_reported
df["P2_Not_Reported"] = ((df["Barratt_Barratt_P2_Edu"].isnull()) & (df["Barratt_Barratt_P2_Occ"].isnull())).astype(int)
print(df.loc[51])

df.head()

file_path = '/content/drive/My Drive/CLEANED_TRAIN_CATEGORICAL_METADATA_2.xlsx'

df.to_excel(file_path, index=False)

print(f"DataFrame saved as Excel file to {file_path}")

"""#**TEST DATA**"""

import pandas as pd

file_path = "/content/drive/My Drive/TEST_CATEGORICAL.xlsx"

df_test = pd.read_excel(file_path)

df_test.head()

# handling missing values
print(df_test.isnull().sum())
print(len(df_test))

# mode imputation for all columns with <10 missing values

impute_columns = ['PreInt_Demos_Fam_Child_Ethnicity', 'PreInt_Demos_Fam_Child_Race', 'Barratt_Barratt_P1_Edu', 'Barratt_Barratt_P1_Occ' ]

for col in impute_columns:
    df_test[col] = df_test[col].fillna(df_test[col].mode()[0])

import pandas as pd

# Check how many cases are missing both vs. only one
missing_edu = df_test['Barratt_Barratt_P2_Edu'].isna()
missing_occ = df_test['Barratt_Barratt_P2_Occ'].isna()

# Count occurrences
print("Both Missing:", ((missing_edu) & (missing_occ)).sum())
print("Only Education Missing:", (missing_edu & ~missing_occ).sum())
print("Only Occupation Missing:", (~missing_edu & missing_occ).sum())

# Check correlation with other variables (e.g., household size, marital status)
if 'Household_Structure' in df_test.columns:
    print(df.groupby('Household_Structure')[['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']].apply(lambda x: x.isna().sum()))

# # if both occ and edu is missing for parent 2, binary encode 1 for no_parent_reported
# df_test["P2_Not_Reported"] = ((df_test["Barratt_Barratt_P2_Edu"].isnull()) & (df_test["Barratt_Barratt_P2_Occ"].isnull())).astype(int)
# print(df_test.loc[52])

# # for columns where p2 occ OR edu is missing, do mode imputation
# df_test['Barratt_Barratt_P2_Edu'] = df_test['Barratt_Barratt_P2_Edu'].fillna(df_test['Barratt_Barratt_P2_Edu'].mode()[0])
# df_test['Barratt_Barratt_P2_Occ'] = df_test['Barratt_Barratt_P2_Occ'].fillna(df_test['Barratt_Barratt_P2_Occ'].mode()[0])

from sklearn.impute import KNNImputer

# Selecting only the columns to impute
columns_to_impute = ['Barratt_Barratt_P2_Edu', 'Barratt_Barratt_P2_Occ']

# Initialize KNNImputer
knn_imputer = KNNImputer(n_neighbors=5, weights="uniform")  # Using 5 nearest neighbors

# Fit on training data and transform both train and test data
knn_imputer.fit(df[columns_to_impute])  # Fit on train data

# Transform train and test data using the already fitted imputer
df[columns_to_impute] = knn_imputer.transform(df[columns_to_impute])
df_test[columns_to_impute] = knn_imputer.transform(df_test[columns_to_impute])

# Ensure imputed values are still integers (since KNN can return float values)
df[columns_to_impute] = df[columns_to_impute].round().astype(int)
df_test[columns_to_impute] = df_test[columns_to_impute].round().astype(int)

# Verify if missing values are gone
print(df[columns_to_impute].isna().sum())  # Should print 0 for both columns
print(df_test[columns_to_impute].isna().sum())  # Should print 0 for both columns

print(df_test.iloc[30:60].to_string())

print(df_test.isnull().sum())

file_path = '/content/drive/My Drive/CLEANED_TEST_CATEGORICAL.xlsx'

df_test.to_excel(file_path, index=False)

print(f"DataFrame saved as Excel file to {file_path}")