# -*- coding: utf-8 -*-
"""wids_attempt_2boosted.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zxROdEUKUHD9w8XECZ9nObUCBa0Jt1c1
"""

import numpy as np
import pandas as pd
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import SMOTE

mri_data = pd.read_csv("mri_data.csv")
mri_data.head()

mri_data.columns

combined_df = pd.read_csv("COMBINED_DATA.csv")
solutions_df = pd.read_excel("TRAINING_SOLUTIONS.xlsx", sheet_name="training_combined")

# Merge on 'participant_id'
df_intermediate = combined_df.merge(solutions_df, on="participant_id", how="inner")
df = df_intermediate.merge(mri_data, on="participant_id", how="inner")

# Display the first few rows
print(df.head())

# Create test set before removing particpant_id
df_test = combined_df[combined_df['dataset'] == 0].copy()
participant_ids = df_test['participant_id']  # Retain participant_id for final output

# Prepare test features (exclude non-feature columns) BEFORE aligning
X_test = df_test.drop(columns=['participant_id', 'dataset'])

df_test.head()

# Drop 'participant_id'
df = df.drop(columns=['participant_id'])

# Separate features (X) and targets (y)
X = df.drop(columns=['ADHD_Outcome', 'Sex_F'])
y_adhd = df['ADHD_Outcome']
y_sex = df['Sex_F']

# Handle missing values using KNNImputer
from sklearn.impute import KNNImputer
imputer = KNNImputer(n_neighbors=5)
X_imputed = imputer.fit_transform(X)

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

# Apply PCA for feature reduction (retain 95% variance)
pca = PCA(n_components=0.95)
X_pca = pca.fit_transform(X_scaled)

### **Separate Training for Each Target Variable**
# 1. ADHD Classification
X_train_adhd, X_test_adhd, y_train_adhd, y_test_adhd = train_test_split(X_pca, y_adhd, test_size=0.2, random_state=42)

# Apply SMOTE to balance classes
smote = SMOTE(random_state=42)
X_train_adhd, y_train_adhd = smote.fit_resample(X_train_adhd, y_train_adhd)

# Train ADHD model
rf_adhd = RandomForestClassifier(n_estimators=200, max_depth=20, random_state=42)
rf_adhd.fit(X_train_adhd, y_train_adhd)
adhd_preds = rf_adhd.predict(X_test_adhd)
adhd_accuracy = accuracy_score(y_test_adhd, adhd_preds)
print(f"ADHD Prediction Accuracy: {adhd_accuracy:.4f}")

# 2. Sex Classification
X_train_sex, X_test_sex, y_train_sex, y_test_sex = train_test_split(X_pca, y_sex, test_size=0.2, random_state=42)

# Apply SMOTE to balance classes
X_train_sex, y_train_sex = smote.fit_resample(X_train_sex, y_train_sex)

# Train Sex model
rf_sex = RandomForestClassifier(n_estimators=200, max_depth=20, random_state=42)
rf_sex.fit(X_train_sex, y_train_sex)
sex_preds = rf_sex.predict(X_test_sex)
sex_accuracy = accuracy_score(y_test_sex, sex_preds)
print(f"Sex Prediction Accuracy: {sex_accuracy:.4f}")

missing_cols = set(X.columns) - set(X_test.columns)
for col in missing_cols:
    X_test[col] = 0  # Fill missing columns with 0 (or another appropriate default)

# Reorder columns to match training data
X_test = X_test[X.columns]

# Apply same transformations (impute, scale, PCA)
X_test_imputed = imputer.transform(X_test)
X_test_scaled = scaler.transform(X_test_imputed)
X_test_pca = pca.transform(X_test_scaled)  # If using PCA


# Make Predictions
adhd_preds = rf_adhd.predict(X_test_pca)
sex_preds = rf_sex.predict(X_test_pca)

# Save output
output_df = pd.DataFrame({
    'participant_id': participant_ids,
    'ADHD_Outcome': adhd_preds,
    'Sex_F': sex_preds
})
output_df.to_csv('test_predictions.csv', index=False)

print("Predictions saved to test_predictions.csv!")

print(f"Missing columns: {missing_cols}")

base = RandomForestClassifier(random_state=42, criterion='entropy', max_depth=n, class_weight='balanced') model = MultiOutputClassifier(base, n_jobs=-1) model.fit(X1_train, y1_train)